{"version":3,"sources":["redux/cursorSlice.tsx","redux/baselineSlice.tsx","components/Viewer.tsx","python/salsasource.py","App.tsx","reportWebVitals.ts","redux/store.tsx","index.tsx"],"names":["cursorSlice","createSlice","name","initialState","position","drag","reducers","setPosition","state","action","payload","setDrag","actions","baselineSlice","dataPoints","fitValues","subtraction","setDataPoints","setFitValues","setSubtraction","HC_exporting","Highcharts","require","Viewer","memo","props","selectionFunction","xdisplayUnit","dispatch","useDispatch","useSelector","cursor","isSelecting","baselineFit","baseline","isBaselineFitted","length","chartComponentRef","useRef","chart","current","gaussianGuess","setGaussianGuess","gaussianGuessRef","gaussianData","getGaussianFit","fileName","dataSource","unit","setUnit","e","console","log","options","series","forEach","allowPointSelect","points","point","x","xAxis","min","max","y","yAxis","select","data","getSelectedPoints","map","guess","range","xmin","xmax","ymin","ymax","xminpix","toPixels","xmaxpix","yminpix","ymaxpix","width","height","rectangle","renderer","rect","attr","on","filter","value","destroy","add","plotRectangle","zoomType","tooltip","enabled","plotOptions","enableMouseTracking","followPointer","sourceData","xdata","axisdata","toJs","ydata","rawdata","header","xdataArray","slice","call","xi","i","baselineData","item","subtractedData","idx","type","findNearestPointBy","lineWidth","push","colorIndex","gaussian","subtitle","get","toFixed","title","text","renderTo","container","events","selection","click","undefined","render","highcharts","ref","containerProps","onMouseMove","event","xPos","yPos","pointer","normalize","chartX","plotLeft","chartY","plotTop","chartWidth","chartHeight","toValue","getCursorPos","unSelectAllPoints","selected","Toolbar","baselinePoints","useState","order","setOrder","isFitting","setIsFitting","fitBaseline","result","fit_baseline","style","display","content","Position","TOP_LEFT","minimal","icon","small","active","onClick","disabled","className","Classes","TOOLTIP_INDICATOR","onValueChange","marginLeft","label","inline","onChange","target","pyodideInstance","a","window","loadPyodide","indexURL","pyodide","loadPackage","runScript","code","runPythonAsync","globals","CursorInforPanel","textAlign","BaselinePointTable","overflow","numRows","enableGhostCells","cellRenderer","rowIndex","GaussianGuessTable","columnWidths","App","pyodideObj","pyodideLoaded","setPyodideLoaded","newFileName","setNewfileName","initialValue","setValue","useEffect","useStateRef","setGaussianData","init","setDataSource","getData","file","fetch","salsaSourceDef","script","align","Alignment","LEFT","htmlFor","id","hidden","reader","FileReader","onabort","onerror","onload","jsarray","Float32Array","readAsArrayBuffer","readFile","files","RIGHT","preventDefault","open","nGaussian","fit_gaussian","flex","panel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","cursorReducer","baselineReducer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6673e4ff.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface CursorState {\n  position: number[]\n  drag: string\n}\n\nconst initialState: CursorState = {\n  position: [0, 0],\n  drag: \"zoom\"\n}\n\nexport const cursorSlice = createSlice({\n  name: 'cursor',\n  initialState,\n  reducers: {\n    setPosition: (state, action: PayloadAction<number[]>) => {\n      state.position = action.payload\n    },\n    setDrag: (state, action: PayloadAction<string>) => {\n      state.drag = action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setPosition, setDrag } = cursorSlice.actions\n\nexport default cursorSlice.reducer","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface BaselineState {\n  dataPoints: number[][]\n  fitValues: number[]\n  subtraction: boolean\n}\n\nconst initialState: BaselineState = {\n  dataPoints: [],\n  fitValues: [],\n  subtraction: false\n}\n\nexport const baselineSlice = createSlice({\n  name: 'baseline',\n  initialState,\n  reducers: {\n    setDataPoints: (state, action: PayloadAction<number[][]>) => {\n      state.dataPoints = action.payload\n    },\n    setFitValues: (state, action: PayloadAction<number[]>) => {\n      state.fitValues = action.payload\n    },\n    setSubtraction: (state, action: PayloadAction<boolean>) => {\n      state.subtraction = action.payload\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setDataPoints, setFitValues, setSubtraction } = baselineSlice.actions\n\nexport default baselineSlice.reducer","import { useRef, useState, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from '../redux/store';\nimport { setDrag, setPosition } from '../redux/cursorSlice';\nimport { setDataPoints, setFitValues, setSubtraction } from '../redux/baselineSlice';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HC_exporting from 'highcharts/modules/exporting';\nimport { AnchorButton, Classes, ButtonGroup, Divider, FormGroup, HTMLSelect, NumericInput, Position } from '@blueprintjs/core';\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\n\nHC_exporting(Highcharts);\nrequire(\"highcharts/modules/draggable-points\")(Highcharts);\n\n\nconst Viewer = memo((props: any) => {\n\n  const dispatch = useDispatch();\n  const drag = useSelector((state: RootState) => state.cursor.drag);\n  const isSelecting = drag === \"baseline\" || drag === \"gaussian\";\n\n  const baselineFit = useSelector((state: RootState) => state.baseline.fitValues);\n  const subtraction = useSelector((state: RootState) => state.baseline.subtraction);\n  const isBaselineFitted = baselineFit.length > 0;\n\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n  const chart = chartComponentRef.current?.chart;\n\n  const gaussianGuess = props.gaussianGuess;\n  const setGaussianGuess = props.setGaussianGuess;\n  const gaussianGuessRef = props.gaussianGuessRef;\n\n  const gaussianData = props.gaussianData;\n  const getGaussianFit = props.getGaussianFit;\n\n  const fileName = props.fileName;\n  const dataSource = props.dataSource;\n  const unit = props.unit;\n  const setUnit = props.setUnit;\n\n  const selectPoints = (e: any) => {\n\n    // const chart = chartComponentRef.current?.chart;\n\n    console.log(e)\n    console.log(chart)\n    console.log(\"chart option\", chart?.options)\n\n    if (chart?.series) {\n      chart.series.forEach(\n        (series: any) => {\n          // check the series is selectable, don't select the points on fitting line\n          if (series.options.allowPointSelect === true) {\n            series?.points.forEach(\n              (point: any) => {\n                if (point.x >= e.xAxis[0].min && point.x <= e.xAxis[0].max &&\n                  point.y >= e.yAxis[0].min && point.y <= e.yAxis[0].max) {\n                  point.select(true, true);\n                }\n              }\n            )\n          }\n        }\n      )\n    }\n\n    const data = chart?.getSelectedPoints().map(\n      (point) => { return [point.x || 0.0, point.y || 0.0] }\n    ) || [];\n\n    dispatch(setDataPoints(data));\n\n    // Fire a custom event\n    // console.log(\"highchart\", Highcharts);\n    // Highcharts.fireEvent(chart, 'selectedpoints', { points: chart?.getSelectedPoints() });\n\n    return false; // Don't zoom\n  }\n\n  const unSelectAllPoints = () => {\n    chart?.series.forEach(\n      (series: any) => {\n        series?.points.forEach(\n          (point: any) => {\n            point.selected = false\n          }\n        )\n      }\n    )\n  }\n\n\n  const plotRectangle = (range: number[]) => {\n    const [xmin, xmax, ymin, ymax] = range;\n\n    const xminpix = chart?.xAxis[0].toPixels(xmin, false) || 0;\n    const xmaxpix = chart?.xAxis[0].toPixels(xmax, false) || 0;\n    const yminpix = chart?.yAxis[0].toPixels(ymin, false) || 0;\n    const ymaxpix = chart?.yAxis[0].toPixels(ymax, false) || 0;\n    const width = xmaxpix - xminpix;\n    const height = yminpix - ymaxpix;\n\n    console.log(\"rect params\", xminpix, ymaxpix, width, height)\n    const rectangle = chart?.renderer.rect(xminpix, ymaxpix, width, height, 2)\n      .attr({\n        \"stroke-width\": 2,\n        \"stroke\": 'red',\n        \"fill\": 'black',\n        \"fill-opacity\": 0.1,\n        \"zIndex\": 3\n      })\n      .on(\"click\", () => {\n        // need useRef here, otherwise the eventlistener use the old state\n        // https://stackoverflow.com/questions/53845595/wrong-react-hooks-behaviour-with-event-listener\n        setGaussianGuess(\n          gaussianGuessRef.current.filter(\n            (value: any) => value !== range\n          )\n        );\n        rectangle?.destroy();\n      })\n      .add();\n\n  }\n\n  const selectRange = (e: any) => {\n\n    // const chart = chartComponentRef.current?.chart;\n\n    // console.log(e)\n    // console.log(chart)\n    // console.log(\"chart option\", chart?.options)\n\n    const xmin = e.xAxis[0].min;\n    const xmax = e.xAxis[0].max;\n    const ymin = e.yAxis[0].min;\n    const ymax = e.yAxis[0].max;\n\n    const guess = [xmin, xmax, ymin, ymax];\n    setGaussianGuess([...gaussianGuess, guess]);\n\n    plotRectangle(guess);\n    // Fire a custom event\n    // console.log(\"highchart\", Highcharts);\n    // Highcharts.fireEvent(chart, 'selectedpoints', { points: chart?.getSelectedPoints() });\n\n    return false; // Don't zoom\n  }\n\n  let selectionFunction;\n  if (drag === \"baseline\") {\n    selectionFunction = selectPoints;\n  }\n  else if (drag === \"gaussian\") {\n    selectionFunction = selectRange;\n  }\n\n  function unselectByClick() {\n    const points = chart?.getSelectedPoints();\n    if (points?.length && points.length > 0) {\n      points.forEach((point) => {\n        point.select(false);\n      })\n    }\n    dispatch(setDataPoints([]));\n  }\n\n  // const setCursorX = props.setCursorX;\n  // const setCursorY = props.setCursorY;\n\n  // const addBaselinePoints = (point: Array<number>) => {\n  //   setBaselinePoints([...baselinePoints, point]);\n  // };\n\n  // TODO: update table when drag and drop\n  // const updateBaselinePoints = (oldPoint: Array<number>, newPoint: Array<number>) => {\n  //   // console.log(\"update\", oldPoint, newPoint);\n  //   // const test = baselinePoints.map((x, i) => [i, x]);\n  //   // console.log(\"test\", test)\n  //   // const targetIdx = baselinePoints.filter((ele) => {\n  //   //   console.log(\"filter\", ele)\n  //   //   return ele[0] === oldPoint[0] && ele[1] === oldPoint[1]\n  //   // });\n  //   // console.log(\"idx:\", targetIdx);\n  //   console.log(\"a\", baselinePoints);\n  //   setBaselinePoints([...baselinePoints]);\n  //   console.log(\"b\", baselinePoints);\n  //   // setBaselinePoints(baselinePoints[baselinePoints.map((x, i) => [i, x]).filter(\n  //   //   x => x[1] == point)[0][0]] = point);\n  // }\n\n  let xdisplayUnit;\n\n  if (unit === \"freq-k\") {\n    xdisplayUnit = \"kHz\";\n  } else if (unit === \"freq-m\") {\n    xdisplayUnit = \"MHz\";\n  } else if (unit === \"freq-g\") {\n    xdisplayUnit = \"GHz\";\n  } else if (unit === \"chan\") {\n    xdisplayUnit = \"Channel\";\n  } else if (unit === \"vel\") {\n    xdisplayUnit = \"Velocity (km/s)\";\n  } else {\n    xdisplayUnit = \"Hz\";\n  }\n\n  const options: Highcharts.Options = {\n    chart: {\n      zoomType: 'x',\n    },\n    tooltip: {\n      enabled: true\n    },\n    plotOptions: {\n      series: {\n        enableMouseTracking: true,\n        tooltip: {\n          followPointer: false,\n        },\n      },\n    },\n  };\n\n  let sourceData: number[][] = [];\n\n  if (dataSource) {\n\n    const xdata = dataSource.axisdata(1, unit).toJs();\n    const ydata = dataSource.rawdata.toJs()[0][0];\n    const header = dataSource.header.toJs();\n\n    const xdataArray = [].slice.call(xdata);\n    sourceData = xdataArray.map((xi: number, i: number) => {\n      return [xi, ydata[i]];\n    });\n\n    // create dummy baseline array and updated the value if fitting has done\n    const baselineData = xdataArray.map((xi: number, i: number) => {\n      return [xi, 0.0];\n    });\n\n    if (isBaselineFitted === true) {\n      baselineData.forEach((item: number[], i: number) => {\n        item[1] = baselineFit[i];\n      });\n    }\n\n    // create subtracted data if the option is selected\n    if (subtraction === true) {\n      const subtractedData = sourceData.map(\n        (item: number[], idx: number) => {\n          return [item[0], item[1] - baselineData[idx][1]]\n        }\n      )\n      options.series = [\n        {\n          name: 'Observation - Baseline',\n          type: 'scatter',\n          data: subtractedData,\n          findNearestPointBy: 'xy',\n        },\n      ];\n    }\n    else {\n      options.series = [\n        {\n          name: 'Observation',\n          type: 'scatter',\n          lineWidth: 2,\n          data: sourceData,\n          allowPointSelect: isSelecting,\n          findNearestPointBy: 'xy',\n        },\n        // {\n        //   name: \"Baseline\",\n        //   type: \"scatter\",\n        //   data: props.baselinePoints,\n        //   dragDrop: {\n        //     draggableX: true,\n        //     draggableY: true\n        //   },\n        // },\n      ];\n\n      // add another label if we plot both original data and baseline\n      if (isBaselineFitted === true) {\n        options.series.push({\n          name: 'Baseline fitting',\n          type: 'line',\n          data: baselineData,\n          allowPointSelect: false,\n          colorIndex: 3,\n        })\n      }\n      console.log(\"series\", options.series);\n    }\n\n    if (gaussianData) {\n      const gaussian = xdataArray.map((xi: number, i: number) => {\n        return [xi, 0.0];\n      });\n      gaussian.forEach((item: number[], i: number) => {\n        item[1] = gaussianData[i];\n      });\n      options.series.push(\n        {\n          name: 'Gaussian',\n          type: 'line',\n          data: gaussian,\n          findNearestPointBy: 'xy',\n          colorIndex: 5,\n        },\n      );\n    }\n\n    // options.series = [\n    //   {\n    //     name: \"Observation\",\n    //     type: 'line',\n    //     data: sourceData,\n    //     allowPointSelect: selectMode,\n    //   },\n    //   {\n    //     name: \"Baseline\",\n    //     type: \"scatter\",\n    //     data: baselinePoints,\n    //     dragDrop: {\n    //       draggableX: true,\n    //       draggableY: true\n    //     },\n    //   }\n    // ];\n\n    const subtitle = `${header.get(\"CTYPE2\")}: ${header.get(\"CRVAL2\").toFixed(6)}, ${header.get(\"CTYPE3\")}: ${header.get(\"CRVAL3\").toFixed(6)}`;\n\n    options.title = {\n      text: fileName\n    };\n\n    options.subtitle = {\n      text: subtitle\n    };\n\n    const xAxis = {\n      title: {\n        text: xdisplayUnit,\n      },\n      // labels: {\n      //   format: '{value:.2f}',\n      // }\n    };\n    const yAxis = {\n      title: {\n        text: header.get('BUNIT'),\n      }\n    };\n\n    options.xAxis = xAxis;\n    options.yAxis = yAxis;\n\n  }\n\n  if (isSelecting === true && options.chart) {\n    options.chart.zoomType = 'xy';\n    options.chart.renderTo = chart?.container;\n    options.chart.events = {\n      selection: selectionFunction,\n      click: unselectByClick,\n    };\n  }\n  else if (options.chart) {\n    options.chart.zoomType = 'x';\n    options.chart.events = {\n      selection: undefined,\n      click: undefined,\n      render: undefined,\n    }\n  }\n\n  console.log(\"options\", options)\n\n  const getCursorPos = (event: any) => {\n    let xPos = 0.0;\n    let yPos = 0.0;\n    if (chart) {\n      const e = chart.pointer.normalize(event);\n      const x = e.chartX - chart.plotLeft;\n      const y = e.chartY - chart.plotTop;\n      // const top = chart.container.offsetTop;\n      // const left = chart.container.offsetLeft;\n      // const x = event.clientX - chart.plotLeft - left;\n      // const y = event.clientY - chart.plotTop - top;\n      if (x >= 0 && y >= 0 && x <= chart.chartWidth && y <= chart.chartHeight) {\n        // console.log(chart.xAxis[0].toValue(x, true));\n        // console.log(chart.yAxis[0].toValue(chart.plotHeight - y, true));\n        // setCursorX(chart.xAxis[0].toValue(x, true));\n        // setCursorY(chart.yAxis[0].toValue(y, true));\n        xPos = chart.xAxis[0].toValue(x, true);\n        yPos = chart.yAxis[0].toValue(y, true);\n      }\n      // console.log(event);\n    }\n    // console.log(event);\n    return { xPos, yPos };\n  }\n\n  const handleMouseMove = (event: any) => {\n    const { xPos, yPos } = getCursorPos(event);\n    dispatch(setPosition([xPos, yPos]));\n    // setCursorX(xPos);\n    // setCursorY(yPos);\n  };\n\n  return (\n    <div>\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n        ref={chartComponentRef}\n        containerProps={{\n          onMouseMove: handleMouseMove,\n          // onDoubleClick: handleDoubleClick,\n        }}\n      />\n      <Toolbar\n        unit={unit}\n        setUnit={setUnit}\n        dataSource={dataSource}\n        getGaussianFit={getGaussianFit}\n        setGaussianGuess={setGaussianGuess}\n        unSelectAllPoints={unSelectAllPoints}\n      />\n    </div>\n  );\n});\n\nconst Toolbar = (props: any) => {\n  const dispatch = useDispatch();\n  const drag = useSelector((state: RootState) => state.cursor.drag);\n  const baselinePoints = useSelector((state: RootState) => state.baseline.dataPoints);\n  const baselineFit = useSelector((state: RootState) => state.baseline.fitValues);\n  const subtraction = useSelector((state: RootState) => state.baseline.subtraction);\n  const isBaselineFitted = baselineFit.length > 0;\n  const xdata = baselinePoints.map((item: number[]) => { return item[0] });\n  const ydata = baselinePoints.map((item: number[]) => { return item[1] });\n\n  const dataSource = props.dataSource;\n  const getGaussianFit = props.getGaussianFit;\n  const unit = props.unit;\n  const setUnit = props.setUnit;\n  const [order, setOrder] = useState(0);\n  const [isFitting, setIsFitting] = useState(false);\n\n  const setGaussianGuess = props.setGaussianGuess;\n  const unSelectAllPoints = props.unSelectAllPoints;\n\n  const fitBaseline = (x: number[], y: number[]) => {\n    const result = dataSource?.fit_baseline(x, y, unit).toJs();\n    const baselineFit = [].slice.call(result);\n    dispatch(setFitValues(baselineFit));\n  }\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <ButtonGroup>\n        <Tooltip2\n          content=\"Cursor action: drag to zoom\"\n          position={Position.TOP_LEFT}\n          minimal={true}\n        >\n          <AnchorButton\n            icon=\"zoom-in\"\n            small={true}\n            active={drag === \"zoom\"}\n            onClick={() => { dispatch(setDrag(\"zoom\")) }}\n          />\n        </Tooltip2>\n        <Tooltip2\n          content=\"Cursor action: select baseline points\"\n          position={Position.TOP_LEFT}\n          minimal={true}\n        >\n          <AnchorButton\n            icon=\"widget-button\"\n            small={true}\n            active={drag === \"baseline\"}\n            disabled={subtraction}\n            onClick={() => { dispatch(setDrag(\"baseline\")) }}\n          />\n        </Tooltip2>\n        <Tooltip2\n          content=\"Cursor action: select gaussian peak ranges\"\n          position={Position.TOP_LEFT}\n          minimal={true}\n        >\n          <AnchorButton\n            icon=\"widget\"\n            small={true}\n            active={drag === \"gaussian\"}\n            disabled={!isBaselineFitted || !subtraction}\n            onClick={() => { dispatch(setDrag(\"gaussian\")) }}\n          />\n        </Tooltip2>\n      </ButtonGroup>\n      <Divider />\n      <Tooltip2\n        content=\"Subtraction baseline\"\n        position={Position.TOP_LEFT}\n        minimal={true}\n      >\n        <AnchorButton\n          icon=\"bring-data\"\n          small={true}\n          active={subtraction}\n          onClick={() => {\n            dispatch(setSubtraction(!subtraction));\n            dispatch(setDrag(\"zoom\"));\n          }}\n        />\n      </Tooltip2>\n      <Tooltip2\n        content=\"Fit baseline\"\n        position={Position.TOP_LEFT}\n        minimal={true}\n      >\n        <AnchorButton\n          icon=\"regression-chart\"\n          small={true}\n          disabled={!baselinePoints.length}\n          onClick={() => { fitBaseline(xdata, ydata) }}\n        />\n      </Tooltip2>\n      <Tooltip2\n        content=\"Remove all baseline data\"\n        position={Position.TOP_LEFT}\n        minimal={true}\n      >\n        <AnchorButton\n          icon=\"delete\"\n          small={true}\n          onClick={() => {\n            unSelectAllPoints();\n            dispatch(setDataPoints([]));\n            fitBaseline([], []);\n          }}\n        />\n      </Tooltip2>\n      <Divider />\n      <Tooltip2\n        className={Classes.TOOLTIP_INDICATOR}\n        content=\"Fit Gaussian\"\n        position={Position.TOP_LEFT}\n        minimal={true}\n      >\n        <AnchorButton\n          icon=\"timeline-bar-chart\"\n          small={true}\n          active={isFitting}\n          onClick={() => {\n            if (isFitting) {\n              getGaussianFit(0);\n            }\n            else {\n              getGaussianFit(order);\n            }\n            setIsFitting(!isFitting);\n          }}\n        />\n      </Tooltip2>\n      <Popover2\n        content={\n          <NumericInput\n            style={{ width: 30 }}\n            value={order}\n            min={0}\n            onValueChange={(value) => {\n              setOrder(value);\n              if (isFitting) getGaussianFit(value);\n            }}\n          />\n        }\n      >\n        <Tooltip2\n          content=\"Number of Gaussian peaks\"\n          position={Position.TOP_LEFT}\n          minimal={true}\n        >\n          <AnchorButton text={order} small={true} />\n        </Tooltip2>\n      </Popover2>\n      <Tooltip2\n        content=\"Remove all gaussian data\"\n        position={Position.TOP_LEFT}\n        minimal={true}\n      >\n        <AnchorButton\n          icon=\"delete\"\n          small={true}\n          onClick={() => {\n            setGaussianGuess([]);\n            getGaussianFit(0);\n            // dispatch(setDataPoints([]));\n            // fitBaseline([], []);\n          }}\n        />\n      </Tooltip2>\n\n      <FormGroup style={{ marginLeft: \"auto\", height: 10 }} label=\"x-axis unit:\" inline={true}>\n        <HTMLSelect value={unit} minimal={true} onChange={(e) => { setUnit(e.target.value) }}>\n          <option value=\"freq\">Frequency (Hz)</option>\n          <option value=\"freq-k\">Frequency (kHz)</option>\n          <option value=\"freq-m\">Frequency (MHz)</option>\n          <option value=\"freq-g\">Frequency (GHz)</option>\n          <option value=\"chan\">Channel</option>\n          <option value=\"vel\">Velocity (km/s)</option>\n        </HTMLSelect>\n      </FormGroup>\n    </div>\n  )\n}\n\nexport default Viewer;","export default __webpack_public_path__ + \"static/media/salsasource.74c361a6.py\";","import { useState, useEffect, useRef } from 'react';\nimport { Alignment, Button, Card, Icon, Label, Navbar, NavbarDivider, NavbarGroup, NavbarHeading, Tabs, Tab } from '@blueprintjs/core';\nimport { Cell, Column, Table2 } from \"@blueprintjs/table\";\nimport Viewer from './components/Viewer';\nimport salsaSourceDef from './python/salsasource.py';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from './redux/store'\n\nimport './App.css';\n\ndeclare global { // <- [reference](https://stackoverflow.com/a/56458070/11542903)\n  interface Window {\n    pyodide: any;\n    jsarray: any;\n    loadPyodide: any;\n    // languagePluginLoader: any;\n  }\n}\n\nconst pyodideInstance = async () => {\n  const pyodide = await window.loadPyodide({\n    indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\"\n  });\n  await pyodide.loadPackage([\"astropy\", \"scipy\"]);\n  // await pyodide.loadPackage(\"astropy\")\n  return pyodide\n}\n\nconst runScript = async (pyodide: any, code: string) => {\n  await pyodide.runPythonAsync(code)\n  const content = pyodide.globals.get(\"salsa\")\n  console.log(\"globals\", content)\n\n  return content\n}\n\nfunction App() {\n  const dispatch = useDispatch();\n  const pyodideObj = useRef<any>(null);\n  const [pyodideLoaded, setPyodideLoaded] = useState(false);\n  const [newFileName, setNewfileName] = useState(\"\");\n  const [unit, setUnit] = useState(\"freq\");\n\n  const useStateRef = (initialValue: any) => {\n    const [value, setValue] = useState(initialValue);\n\n    const ref = useRef(value);\n\n    useEffect(() => {\n      ref.current = value;\n    }, [value]);\n\n    return [value, setValue, ref];\n  }\n\n  const [gaussianGuess, setGaussianGuess, gaussianGuessRef] = useStateRef([]);\n  const [gaussianData, setGaussianData] = useState<number[]>([]);\n\n  useEffect(() => {\n    async function init() {\n      if (!pyodideLoaded) {\n        pyodideObj.current = await pyodideInstance();\n        setPyodideLoaded(true);\n      } else {\n        console.log(\"no duplicate reload to avoid pyodide error\")\n      }\n    }\n    init()\n  });\n\n  const [dataSource, setDataSource] = useState<any>();\n\n  const getData = async (file: File) => {\n    const script = await (await fetch(salsaSourceDef)).text();\n    // console.log(\"script text\", scriptText)\n    const content = await runScript(pyodideObj.current, script);\n    // console.log(\"content\", content)\n    // console.log(\"header\", content.header.toJs())\n    // const xdata = content.axisdata(1).toJs()\n    // const ydata = content.rawdata.toJs()[0][0]\n\n    setNewfileName(file.name);\n    setDataSource(content);\n  }\n\n  const readFile = (file: File) => {\n    if (file) {\n      console.log(\"processing file:\", file)\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        window.jsarray = new Float32Array(reader.result as ArrayBuffer);\n        getData(file);\n      }\n      reader.readAsArrayBuffer(file)\n    }\n  }\n\n  const getGaussianFit = (nGaussian: number) => {\n    const result = dataSource?.fit_gaussian(unit, nGaussian, gaussianGuess).toJs();\n    setGaussianData(result);\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar>\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>SalsaTS</NavbarHeading>\n          <NavbarDivider />\n          <Button disabled={!pyodideLoaded} minimal={true}>\n            <label htmlFor=\"input\">\n              <input type=\"file\" id=\"input\" hidden onChange={(e: any) => { readFile(e.target.files[0]) }} />\n              <Icon icon=\"document\" /> Upload\n            </label>\n          </Button>\n        </NavbarGroup>\n        <NavbarGroup align={Alignment.RIGHT}>\n          <Button\n            icon=\"link\"\n            text=\"Document\"\n            minimal={true}\n            onClick={(e) => {\n              e.preventDefault();\n              window.open('https://github.com/appolloford/salsa-ts/wiki', '_blank', 'noopener,noreferrer');\n            }}\n          />\n        </NavbarGroup>\n      </Navbar>\n      <Viewer\n        fileName={newFileName}\n        dataSource={dataSource}\n        unit={unit}\n        setUnit={setUnit}\n        gaussianGuess={gaussianGuess}\n        setGaussianGuess={setGaussianGuess}\n        gaussianGuessRef={gaussianGuessRef}\n        gaussianData={gaussianData}\n        getGaussianFit={getGaussianFit}\n      />\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: 1 }}>\n          <Tabs>\n            <Tab\n              id=\"cursorpanel\"\n              title=\"Cursor Information\"\n              panel={\n                <CursorInforPanel />\n              }\n            />\n            <Tab\n              id=\"baselinepoints\"\n              title=\"Selected Baseline Points\"\n              panel={\n                <BaselinePointTable />\n              }\n            />\n            <Tab\n              id=\"gaussianranges\"\n              title=\"Selected Gaussian Ranges\"\n              panel={\n                <GaussianGuessTable\n                  gaussianGuess={gaussianGuess}\n                />\n              }\n            />\n          </Tabs>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nconst CursorInforPanel = (props: any) => {\n\n  const position = useSelector((state: RootState) => state.cursor.position);\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <Label>Position: ({position[0].toFixed(6)}, {position[1].toFixed(6)})</Label>\n    </div>\n  )\n}\n\n\nconst BaselinePointTable = (props: any) => {\n  const baselinePoints = useSelector((state: RootState) => state.baseline.dataPoints)\n  const pointX = (rowIndex: number) => (\n    <Cell>{`${baselinePoints[rowIndex] ? (baselinePoints[rowIndex][0]).toFixed(6) : 0.0}`}</Cell>\n  );\n  const pointY = (rowIndex: number) => (\n    <Cell>{`${baselinePoints[rowIndex] ? (baselinePoints[rowIndex][1]).toFixed(6) : 0.0}`}</Cell>\n  );\n  return (\n    <Card style={{ display: \"block\", overflow: \"auto\", width: 600, height: 150 }}>\n      <Table2 numRows={baselinePoints.length} enableGhostCells={true}>\n        <Column name=\"X coordinate\" cellRenderer={pointX} />\n        <Column name=\"Y coordinate\" cellRenderer={pointY} />\n      </Table2>\n    </Card>\n  )\n}\n\nconst GaussianGuessTable = (props: any) => {\n  const gaussianGuess = props.gaussianGuess;\n\n  const rangeX = (rowIndex: number) => (\n    <Cell>\n      ({`${gaussianGuess[rowIndex] ? (gaussianGuess[rowIndex][0]).toFixed(6) : 0.0}`},\n      {`${gaussianGuess[rowIndex] ? (gaussianGuess[rowIndex][1]).toFixed(6) : 0.0}`})\n    </Cell>\n  );\n  const rangeY = (rowIndex: number) => (\n    <Cell>\n      ({`${gaussianGuess[rowIndex] ? (gaussianGuess[rowIndex][2]).toFixed(6) : 0.0}`},\n      {`${gaussianGuess[rowIndex] ? (gaussianGuess[rowIndex][3]).toFixed(6) : 0.0}`})\n    </Cell>\n  );\n  return (\n    <Card style={{ display: \"block\", overflow: \"auto\", width: 600, height: 150 }}>\n      <Table2 numRows={gaussianGuess.length} enableGhostCells={true} columnWidths={[300, 200]}>\n        <Column name=\"X range\" cellRenderer={rangeX} />\n        <Column name=\"Y range\" cellRenderer={rangeY} />\n      </Table2>\n    </Card>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport cursorReducer from './cursorSlice'\nimport baselineReducer from './baselineSlice'\n\nexport const store = configureStore({\n  reducer: {\n    cursor: cursorReducer,\n    baseline: baselineReducer\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}